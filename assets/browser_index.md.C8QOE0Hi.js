import{_ as s,c as a,o as e,a8 as o}from"./chunks/framework.BX9uSPFk.js";const k=JSON.parse('{"title":"浏览器原理深入解析学习大纲","description":"","frontmatter":{"title":"浏览器原理深入解析学习大纲"},"headers":[],"relativePath":"browser/index.md","filePath":"browser/index.md"}'),t={name:"browser/index.md"};function r(l,i,n,h,g,d){return e(),a("div",null,i[0]||(i[0]=[o(`<h1 id="浏览器原理深入解析学习大纲" tabindex="-1"><strong>浏览器原理深入解析学习大纲</strong> <a class="header-anchor" href="#浏览器原理深入解析学习大纲" aria-label="Permalink to &quot;**浏览器原理深入解析学习大纲**&quot;">​</a></h1><h2 id="一、浏览器基础架构" tabindex="-1"><a href="./architecture.html">一、浏览器基础架构</a> <a class="header-anchor" href="#一、浏览器基础架构" aria-label="Permalink to &quot;[一、浏览器基础架构](./architecture.md)&quot;">​</a></h2><h3 id="_1-浏览器组成与核心模块" tabindex="-1">1. <strong>浏览器组成与核心模块</strong> <a class="header-anchor" href="#_1-浏览器组成与核心模块" aria-label="Permalink to &quot;1. **浏览器组成与核心模块**&quot;">​</a></h3><ul><li><strong>用户界面（UI）</strong>：地址栏、导航按钮、书签等</li><li><strong>浏览器引擎</strong>：协调UI与渲染引擎</li><li><strong>渲染引擎（Rendering Engine）</strong>：解析HTML/CSS，构建渲染树（Blink/WebKit/Gecko）</li><li><strong>JavaScript引擎（V8/SpiderMonkey/JavaScriptCore）</strong></li><li><strong>网络栈（Networking）</strong>：HTTP/HTTPS请求处理</li><li><strong>数据存储（Storage）</strong>：Cookie、LocalStorage、IndexedDB</li><li><strong>GPU加速</strong>：硬件加速渲染</li></ul><h3 id="_2-多进程架构-Chrome为例-" tabindex="-1">2. <strong>多进程架构（Chrome为例）</strong> <a class="header-anchor" href="#_2-多进程架构-Chrome为例-" aria-label="Permalink to &quot;2. **多进程架构（Chrome为例）**&quot;">​</a></h3><ul><li><strong>浏览器进程（Browser Process）</strong>：管理UI、网络、存储</li><li><strong>渲染进程（Renderer Process）</strong>：每个标签页独立进程（沙盒化）</li><li><strong>GPU进程（GPU Process）</strong>：处理3D/WebGL渲染</li><li><strong>插件进程（Plugin Process）</strong>：Flash/PDF等</li><li><strong>扩展进程（Extension Process）</strong>：浏览器扩展</li></ul><h2 id="二、网页渲染流程-关键渲染路径-" tabindex="-1"><a href="./rendering.html">二、网页渲染流程（关键渲染路径）</a> <a class="header-anchor" href="#二、网页渲染流程-关键渲染路径-" aria-label="Permalink to &quot;[二、网页渲染流程（关键渲染路径）](rendering.md)&quot;">​</a></h2><h3 id="_1-从URL到页面显示" tabindex="-1">1. <strong>从URL到页面显示</strong> <a class="header-anchor" href="#_1-从URL到页面显示" aria-label="Permalink to &quot;1. **从URL到页面显示**&quot;">​</a></h3><ol><li><strong>导航阶段</strong><ul><li>DNS解析 → TCP握手 → TLS协商 → HTTP请求 → 响应解析</li><li>检查缓存（强缓存/协商缓存）</li></ul></li><li><strong>HTML解析与DOM构建</strong><ul><li>字节流 → 字符流 → Token → DOM树</li><li>预加载扫描器（Preload Scanner）优化资源加载</li></ul></li><li><strong>CSS解析与CSSOM构建</strong><ul><li>CSS解析 → CSSOM树（层叠规则计算）</li></ul></li><li><strong>渲染树（Render Tree）合成</strong><ul><li>DOM + CSSOM → 渲染树（排除<code>display: none</code>等不可见元素）</li></ul></li><li><strong>布局（Layout/Reflow）</strong><ul><li>计算元素几何信息（盒模型、位置）</li></ul></li><li><strong>绘制（Paint）</strong><ul><li>生成绘制指令（Paint Records）</li></ul></li><li><strong>合成（Composite）</strong><ul><li>图层（Layer）管理 → GPU光栅化 → 最终显示</li></ul></li></ol><h3 id="_2-优化渲染性能" tabindex="-1">2. <strong>优化渲染性能</strong> <a class="header-anchor" href="#_2-优化渲染性能" aria-label="Permalink to &quot;2. **优化渲染性能**&quot;">​</a></h3><ul><li><strong>减少重排（Reflow）和重绘（Repaint）</strong></li><li><strong>使用<code>transform</code>和<code>opacity</code>触发GPU加速</strong></li><li><strong>避免布局抖动（Layout Thrashing）</strong></li><li><strong>使用<code>requestAnimationFrame</code>优化动画</strong></li></ul><h2 id="三、JavaScript引擎与事件循环-Event-Loop-" tabindex="-1"><a href="./js-engine.html">三、JavaScript引擎与事件循环（Event Loop）</a> <a class="header-anchor" href="#三、JavaScript引擎与事件循环-Event-Loop-" aria-label="Permalink to &quot;[三、JavaScript引擎与事件循环（Event Loop）](js-engine.md)&quot;">​</a></h2><h3 id="_1-V8引擎核心机制" tabindex="-1">1. <strong>V8引擎核心机制</strong> <a class="header-anchor" href="#_1-V8引擎核心机制" aria-label="Permalink to &quot;1. **V8引擎核心机制**&quot;">​</a></h3><ul><li><strong>解析（Parsing）</strong> → <strong>解释（Ignition）</strong> → <strong>优化编译（TurboFan）</strong></li><li><strong>隐藏类（Hidden Class）</strong> 和 <strong>内联缓存（Inline Cache）</strong> 优化</li><li><strong>垃圾回收（GC）</strong>：标记-清除、分代回收</li></ul><h3 id="_2-事件循环-Event-Loop-" tabindex="-1">2. <strong>事件循环（Event Loop）</strong> <a class="header-anchor" href="#_2-事件循环-Event-Loop-" aria-label="Permalink to &quot;2. **事件循环（Event Loop）**&quot;">​</a></h3><ul><li><strong>调用栈（Call Stack）</strong></li><li><strong>任务队列（Task Queue）</strong>：宏任务（<code>setTimeout</code>、<code>I/O</code>）</li><li><strong>微任务队列（Microtask Queue）</strong>：<code>Promise</code>、<code>MutationObserver</code></li><li><strong>渲染阶段（Render Steps）</strong>：<code>requestAnimationFrame</code></li></ul><p><strong>经典面试题：</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes dracula-soft vitesse-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">console</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">log</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#BF9EEE;--shiki-light:#2F798A;">1</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">);</span></span>
<span class="line"><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">setTimeout</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(()</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =&gt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> console</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">log</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#BF9EEE;--shiki-light:#2F798A;">2</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">),</span><span style="--shiki-dark:#BF9EEE;--shiki-light:#2F798A;"> 0</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">);</span></span>
<span class="line"><span style="--shiki-dark:#97E1F1;--shiki-dark-font-style:italic;--shiki-light:#998418;--shiki-light-font-style:inherit;">Promise</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">resolve</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">().</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">then</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(()</span><span style="--shiki-dark:#F286C4;--shiki-light:#999999;"> =&gt;</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;"> console</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">log</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#BF9EEE;--shiki-light:#2F798A;">3</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">));</span></span>
<span class="line"><span style="--shiki-dark:#F6F6F4;--shiki-light:#B07D48;">console</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">.</span><span style="--shiki-dark:#62E884;--shiki-light:#59873A;">log</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">(</span><span style="--shiki-dark:#BF9EEE;--shiki-light:#2F798A;">4</span><span style="--shiki-dark:#F6F6F4;--shiki-light:#999999;">);</span></span>
<span class="line"><span style="--shiki-dark:#7B7F8B;--shiki-light:#A0ADA0;">// 输出顺序：1 → 4 → 3 → 2</span></span></code></pre></div><h2 id="四、浏览器存储与缓存机制" tabindex="-1"><a href="./storage.html">四、浏览器存储与缓存机制</a> <a class="header-anchor" href="#四、浏览器存储与缓存机制" aria-label="Permalink to &quot;[四、浏览器存储与缓存机制](storage.md)&quot;">​</a></h2><h3 id="_1-HTTP缓存" tabindex="-1">1. <strong>HTTP缓存</strong> <a class="header-anchor" href="#_1-HTTP缓存" aria-label="Permalink to &quot;1. **HTTP缓存**&quot;">​</a></h3><ul><li><strong>强缓存</strong>（<code>Cache-Control</code>、<code>Expires</code>）</li><li><strong>协商缓存</strong>（<code>ETag</code>、<code>Last-Modified</code>）</li></ul><h3 id="_2-本地存储" tabindex="-1">2. <strong>本地存储</strong> <a class="header-anchor" href="#_2-本地存储" aria-label="Permalink to &quot;2. **本地存储**&quot;">​</a></h3><ul><li><strong>Cookie</strong>（4KB，随请求发送）</li><li><strong>Web Storage</strong>（<code>localStorage</code> 10MB / <code>sessionStorage</code> 会话级）</li><li><strong>IndexedDB</strong>（结构化数据存储）</li><li><strong>Service Worker + Cache API</strong>（PWA离线缓存）</li></ul><h3 id="_3-缓存策略优化" tabindex="-1">3. <strong>缓存策略优化</strong> <a class="header-anchor" href="#_3-缓存策略优化" aria-label="Permalink to &quot;3. **缓存策略优化**&quot;">​</a></h3><ul><li><strong>CDN加速</strong></li><li><strong>HTTP/2 Server Push</strong></li><li><strong>Stale-While-Revalidate</strong>（SWR策略）</li></ul><h2 id="五、浏览器安全机制" tabindex="-1"><a href="./security.html">五、浏览器安全机制</a> <a class="header-anchor" href="#五、浏览器安全机制" aria-label="Permalink to &quot;[五、浏览器安全机制](security.md)&quot;">​</a></h2><h3 id="_1-同源策略-Same-Origin-Policy-" tabindex="-1">1. <strong>同源策略（Same-Origin Policy）</strong> <a class="header-anchor" href="#_1-同源策略-Same-Origin-Policy-" aria-label="Permalink to &quot;1. **同源策略（Same-Origin Policy）**&quot;">​</a></h3><ul><li><strong>限制跨域请求</strong>（<code>XMLHttpRequest</code>、<code>fetch</code>）</li><li><strong>CORS（跨域资源共享）</strong>（<code>Access-Control-Allow-Origin</code>）</li><li><strong>JSONP（传统跨域方案）</strong></li></ul><h3 id="_2-安全防护" tabindex="-1">2. <strong>安全防护</strong> <a class="header-anchor" href="#_2-安全防护" aria-label="Permalink to &quot;2. **安全防护**&quot;">​</a></h3><ul><li><strong>XSS（跨站脚本攻击）防御</strong>：输入转义、CSP（内容安全策略）</li><li><strong>CSRF（跨站请求伪造）防御</strong>：Token验证、<code>SameSite Cookie</code></li><li><strong>HTTPS与混合内容（Mixed Content）</strong></li></ul><h2 id="六、现代浏览器高级特性" tabindex="-1"><a href="./advanced.html">六、现代浏览器高级特性</a> <a class="header-anchor" href="#六、现代浏览器高级特性" aria-label="Permalink to &quot;[六、现代浏览器高级特性](advanced.md)&quot;">​</a></h2><h3 id="_1-Web-Workers-Service-Workers" tabindex="-1">1. <strong>Web Workers &amp; Service Workers</strong> <a class="header-anchor" href="#_1-Web-Workers-Service-Workers" aria-label="Permalink to &quot;1. **Web Workers &amp; Service Workers**&quot;">​</a></h3><ul><li><strong>多线程计算</strong>（<code>Worker</code>）</li><li><strong>离线缓存 &amp; 后台同步</strong>（<code>Service Worker</code>）</li></ul><h3 id="_2-WebAssembly-WASM-" tabindex="-1">2. <strong>WebAssembly（WASM）</strong> <a class="header-anchor" href="#_2-WebAssembly-WASM-" aria-label="Permalink to &quot;2. **WebAssembly（WASM）**&quot;">​</a></h3><ul><li>高性能计算（C++/Rust → WASM）</li></ul><h3 id="_3-Web-Components" tabindex="-1">3. <strong>Web Components</strong> <a class="header-anchor" href="#_3-Web-Components" aria-label="Permalink to &quot;3. **Web Components**&quot;">​</a></h3><ul><li>自定义组件（<code>Shadow DOM</code>、<code>Custom Elements</code>）</li></ul><h2 id="七、调试与性能分析" tabindex="-1"><a href="./debug.html">七、调试与性能分析</a> <a class="header-anchor" href="#七、调试与性能分析" aria-label="Permalink to &quot;[七、调试与性能分析](debug.md)&quot;">​</a></h2><h3 id="_1-Chrome-DevTools-核心功能" tabindex="-1">1. <strong>Chrome DevTools 核心功能</strong> <a class="header-anchor" href="#_1-Chrome-DevTools-核心功能" aria-label="Permalink to &quot;1. **Chrome DevTools 核心功能**&quot;">​</a></h3><ul><li><strong>Performance面板</strong>（分析FPS、CPU占用）</li><li><strong>Memory面板</strong>（内存泄漏检测）</li><li><strong>Network面板</strong>（请求瀑布图）</li></ul><h3 id="_2-Lighthouse-性能评分" tabindex="-1">2. <strong>Lighthouse 性能评分</strong> <a class="header-anchor" href="#_2-Lighthouse-性能评分" aria-label="Permalink to &quot;2. **Lighthouse 性能评分**&quot;">​</a></h3><ul><li><strong>FCP（First Contentful Paint）</strong></li><li><strong>LCP（Largest Contentful Paint）</strong></li><li><strong>CLS（Cumulative Layout Shift）</strong></li></ul><h2 id="学习建议" tabindex="-1"><strong>学习建议</strong> <a class="header-anchor" href="#学习建议" aria-label="Permalink to &quot;**学习建议**&quot;">​</a></h2><ol><li><strong>动手实践</strong>：使用DevTools分析网页加载过程</li><li><strong>阅读源码</strong>：Chromium开源项目</li><li><strong>深入理解</strong>：《How Browsers Work》（Tali Garsiel）</li></ol>`,44)]))}const u=s(t,[["render",r]]);export{k as __pageData,u as default};
